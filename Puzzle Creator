# Creating a Nonogram solver
# by Karen Roberts
# Graduate Project 24 Aug 2017


### Create Class for nonogram size
class nonogramsize:
    def __init__(self, rsize, csize):
        self.rsize = rsize
        self.csize = csize

    def __str__(self):
        return str(self.rsize) + "x" + str(self.csize)

    def show(self):
        print(self.rsize, "x", self.csize)


### Get user input for the row and column sizes of the puzzle
rsize = int(input("Please enter row size: "))
csize = int(input("Please enter column size: "))

### Create a list containing possible picture grid entries
plist = ['*', '-', 'x']
vlist = [1,0]

# Create blank puzzle and name it
class blankPuzzGrid():
    # Print out the blank puzzle grid
    def __init__ (self, rsize, csize):
        self.rsize =rsize
        self.csize = csize

    def show(self):
        for j in range(0, csize):
            print()
            for i in range(0, rsize):
                print(str(plist[1]), end=" ")
            i+=1
        j+=1
        print()
        print()





#### Create row list containing hint lists for each row

## Create empty rlist for row i
rlist = []

## Create empty rblist for row i
rblist = []

## Create empty rwlist for row i
rwlist = []

for i in range(0, rsize):

    # Create loop that asks how many hints are in row i for this rsize puzzle
    rhcount = int(input("How many hints are in row {} ? ".format(i+1)))

    # Create empty inner hint list for row i hint a
    rhlist = []

    # Create empty inner black hint list for row i hint a
    brehintlist = []

    # Create empty inner white hint list for row i hint a
    wrehintlist = []



    # Create loop that asks rhcount hints for row i
    for a in range(0, rhcount):

        # Asks for user to enter hint a for row i
        erhint = int(input("Please input hint {} in this row:  ".format(a+1)))

        #Change hints to binary strings of Ones
        brehint = [1]*erhint

        #Appends newly converted entry to black row entry list brehintlist
        brehintlist.append(brehint)
        #print(brehintlist)

        # Appends newly entered hint a entry to rhlist for row i
        rhlist.append(erhint)

    # Appends newly appened rhlist to rlist
    rlist.append(rhlist)

    #Appends newly appended binary converted list brehinlist to brlist
    rblist.append(brehintlist)


## Create loop to find number of zeros (white) in each row and convert to binary

# Create empty erwcount list that tells how many whites must be all rows
erwcountlist = []

#Create empty erwcount inner list for white count for row i
for i in range(0, rsize):

    # Calculate white count for row i
    erwcount = rsize -sum(rlist[i])

    # convert row count to zeros list
    erwlist = [0] * (erwcount)

    # Append white count for row to list of white count for all rows
    erwcountlist.append(erwcount)

    # Append newly converted list of zeros (white) for row i to rwlist
    rwlist.append(erwlist)


### Create column list containing hint lists for each column

## Create empty clist for column j
clist = []

## Create empy cblist for column j
cblist = []

## Create empty cwlist for column j
cwlist = []


for j in range(0, csize):

    # Create loop that asks how many hints are in column j for this csize puzzle
    chcount = int(input("How many hints are in column {}? ".format(j+1)))

    # Create empty inner hint list for column j hint b
    chlist = []

    # Create empty inner black hint list for column j hint b
    bcehintlist = []
    # Create loop that asks chcount hints for column j
    for b in range(0, chcount):


        # Asks for user to enter hint a for column j
        echint = int(input("Please input hint {}:  ".format(b+1)))



        #Change hints to binary strings
        bcehint = [1]*echint

        #Appends newly converted entry to black column entry list bcehintlist
        bcehintlist.append(bcehint)
        #print(bcehintlist)

        # Appends newly entered hint a entry to chlist for column j
        chlist.append(echint)


    # Appends newly appended chlist to clist
    clist.append(chlist)

    #Appends newly appended binary converted list bcehinlist to bclist
    cblist.append(bcehintlist)


## Create loop to find number of zeros (white) in each column and convert to binary

# Create empty ecwcount list that tells how many whites must be all columns
ecwcountlist = []

# Create empty ecwcount inner list for white count for column j
for j in range(0, csize):
    # Calculate white count for column j
    ecwcount = csize - sum(clist[j])

    # convert column count to zeros list
    ecwlist = [0] * (ecwcount)

    # Append white count for row to list of white count for all columns
    ecwcountlist.append(ecwcount)

    # Append newly converted list of zeros (white) for column j to cwlist
    cwlist.append(ecwlist)
print()


### Print Everything that has been entered as well as the blank puzzle grid

## Nonogram size Data
print("This is a", nonogramsize(rsize, csize), "Nonogram Solver")

## Row Data
print("Your list of the number of white block required for each row is: ", erwcountlist)
print("Your list of white blocks for each row is: ", rwlist)
print("Your list of row hints is: ", rlist)
print("Your list of black blocks for each row is: ", rblist)

## Column Data
print("Your list of the number of white block required for each column is: ", ecwcountlist)
print("Your list of white blocks for each column is: ", cwlist)
print("Your list of column hints is: ", clist)
print("Your list of black blocks for each column is: ", cblist)

## Blank Puzzle Grid
for j in range(0, csize):
    print()
    for i in range(0, rsize):
        print(str(plist[1]), end=" ")
    i += 1
    print(str(rlist[j]), end=" ")

j += 1
print()
# Prints the hints for each column in last row
for j in range (0, csize):
    print(str(clist[j]), end=" ")
j+=1

print()
print()


#  Check to see if sum of inputs match row length
for i in range(0, rsize):
    if erwcountlist[i]<0:
        print("Row hints for row ", i+1, "exceeds row size")

#  Check to see if sum of inputs match column length
for j in range(0, csize):
    if ecwcountlist[j] <0:
        print("Column hints for column ", j+1, "exceeds column size")


########################## Developer Notes ######################################

# For the 5x5 puzzle:
#
#          1 2   1 1
#          2 1 5 1 2
#     1 2  - - - - -
#     2 1  - - - - -
#       3  - - - - -
#   1 1 1  - - - - -
#     3 1  - - - - -
#
#  The solution:
#
#          1 2   1 1
#          2 1 5 1 2
#     1 2  * - * * -
#     2 1  - * * - *
#       3  - * * * -
#   1 1 1  * - * - *
#     3 1  * * * - *
#
#  What my output lists should look like
# rlist = [[1,2], [2,1], [3], [1,1,1], [3,1]]
# clist = [[1,2], [2,1], [5], [1,1], [1,2]]
# rblist = [[[1],[1,1]], [[1,1], [1]], [1,1,1], [[1], [1], [1]], [[1,1,1], [1]]]
# cblist = [[[1], [1,1]], [[1,1], [1]], [1,1,1,1,1], [[1], [1]], [[1], [1,1]]]
# rwlist = [[0,0], [0,0], [0,0], [0,0], [0]]
# cwlist = [[0,0,], [0,0], [], [0,0,0], [0,0]]

# vlist = ['*', '-', 'x']

# Recal Character picture grid project from grad research
 # Character Picture Grid

#for j in range(0,csize):
    #print()
   # for i in range(0,rsize):
  #   print(str(vlist[i][j]), end=" ")
 #   i+=1
#j+=1
